486 : 486
#(2 2) : None
(+ 137 349) : 486
(- 1000 334) : 666
#(+ 5 a) : Exception
(* 5 99) : 495
(/ 10 5) : 2
(- 5) : -5
(- 5 -3 (- 4)) : 12
(+ 2.7 10) : 12.7
(+ 21 35 12 7) : 75
(* 25 4 12) : 1200
(+ (* 3 5) (- 10 6)) : 19
(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) : 57
(* (+ 2 (* 4 6))  (+ 3 5 7)) : 390
(define pi 3.14159)
(define radius 10)
(* pi (* radius radius)) : 314.159
(define circumference (* 2 pi radius))
circumference : 62.8318
(define (square x) (* x x))
(define (sum-of-squares x y)(+ (square x) (square y)))
(square 5) : 25
(square (square 3)) : 81
(sum-of-squares 3 4) : 25
(sum-of-squares (square 3) (square 4)) : 337
(define (f a)(sum-of-squares (+ a 1) (* a 2)))
(f 5) : 136
(define a 3) :
(define b (+ a 1)) :
(+ a b (* a b)) : 19
(> a b) : False
(if (and (> b a) (< b (* a b))) b a) : 4
(cond ((= a 4) 6) ((= b 4) (+ 6 7 a)) (else 25)) : 16
(+ 2 (if (> b a) b a)) : 6
(* (cond ((> a b) a) ((< a b) b) (else -1)) (+ a 1)) : 16
#(define (a-plus-abs-b a b)((if (> b 0) + -) a b))
#(a-plus-abs-b 3 -5) : 8
#(a-plus-abs-b 2 4) : 6
(define (abs x)(cond ((< x 0) (- x))(else x)))
(define (average x y)(/ (+ x y) 2))
(define (improve guess x)(average guess (/ x guess)))
(define (good-enough? guess x)(< (abs (-(square guess) x)) 0.001))
(define (sqrt-iter guess x)(if (good-enough? guess x) guess(sqrt-iter (improve guess x) x)))
(define (sqrt x) (sqrt-iter 1.0 x))
(sqrt 9) : 3.00009155413138
(define (^ base exp) (if (= exp 0) 1 (* base (^ base (- exp 1)))))
(^ 17 0) : 1
(^ -2 7) : -128
(^ 3 4) : 81
(define (cube x) (* x x x)) : 
(define (sum term a next b)(if (> a b) 0(+ (term a)(sum term (next a) next b))))
(define (inc n) (+ n 1))
(define (sum-cubes a b)(sum cube a inc b))
(sum-cubes 1 10) :3025
(define (identity x) x)
(define (sum-integers a b)(sum identity a inc b))
(sum-integers 1 10) : 55
(define (pi-term x)(/ 1.0 (* x (+ x 2))))
(define (pi-next x)(+ x 4))
(define (pi-sum a b)(sum pi-term a pi-next b))
#!displayfuncs
(* 8 (pi-sum 1 100)):3.139592655589783
#(define (pi-sum a b)(define (pi-term x)(/ 1.0 (* x (+ x 2))))  (define (pi-next x)(+ x 4))(sum pi-term a pi-next b))
(define (list-ref items n) (if (= n 0) (car items) (list-ref (cdr items) (- n 1))))
(define squares (list 1 4 9 16 25))
(list-ref squares 3): 16
#(define (length items) (if (null? items) 0  (+ 1 (length (cdr items)))))
#(define odds (list 1 3 5 7))
#(length odds): 4